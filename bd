-- 1. Вывести фамилии сотрудников, работающих в городе Нью-Йорке.
SELECT E.ENAME
FROM EMP E
JOIN DEPT D ON E.DEPTNO = D.DEPTNO
WHERE D.LOC = 'Нью-Йорк';

-- 2. Вывести фамилии сотрудников, которые получают больше, чем их непосредственные руководители.
SELECT E.ENAME
FROM EMP E
JOIN EMP M ON E.MGR = M.EMPNO
WHERE E.SAL > M.SAL;

-- 3. Вывести фамилии сотрудников из отделов, где работает больше трёх человек.
SELECT E.ENAME
FROM EMP E
WHERE E.DEPTNO IN (SELECT DEPTNO FROM EMP GROUP BY DEPTNO HAVING COUNT(*) > 3);

-- 4. Вывести оклад для каждого сотрудника в пределах одного отдела, потом сумма окладов по отделу. Так для всех отделов. В конце - Итого по всей фирме.
SELECT
    DEPTNO,
    ENAME,
    SAL,
    SUM(SAL) OVER (PARTITION BY DEPTNO) AS DEPT_TOTAL,
    SUM(SAL) OVER () AS GRAND_TOTAL
FROM
    EMP
ORDER BY
    DEPTNO, ENAME;


// Constraints for Unique IDs (Primary Keys)
CREATE CONSTRAINT employee_id_unique IF NOT EXISTS
FOR (e:Employee) REQUIRE e.employee_id IS UNIQUE;

CREATE CONSTRAINT department_id_unique IF NOT EXISTS
FOR (d:Department) REQUIRE d.department_id IS UNIQUE;

CREATE CONSTRAINT job_id_unique IF NOT EXISTS
FOR (j:Job) REQUIRE j.job_id IS UNIQUE;

CREATE CONSTRAINT location_id_unique IF NOT EXISTS
FOR (l:Location) REQUIRE l.location_id IS UNIQUE;

CREATE CONSTRAINT country_id_unique IF NOT EXISTS
FOR (c:Country) REQUIRE c.country_id IS UNIQUE;

CREATE CONSTRAINT region_id_unique IF NOT EXISTS
FOR (r:Region) REQUIRE r.region_id IS UNIQUE;

// Sample Data (adapt to your specific data)

// Regions
CREATE (r1:Region {region_id: 1, region_name: "Europe"});
CREATE (r2:Region {region_id: 2, region_name: "Americas"});
CREATE (r3:Region {region_id: 3, region_name: "Asia"});
CREATE (r4:Region {region_id: 4, region_name: "Middle East and Africa"});

// Countries
CREATE (c1:Country {country_id: "US", country_name: "United States", region_id: 2});
CREATE (c2:Country {country_id: "CA", country_name: "Canada", region_id: 2});
CREATE (c3:Country {country_id: "UK", country_name: "United Kingdom", region_id: 1});
CREATE (c4:Country {country_id: "JP", country_name: "Japan", region_id: 3});

// Locations
CREATE (l1:Location {location_id: 1000, street_address: "1297 Via Cola di Rie", postal_code: "00989", city: "Roma", state_province: null, country_id: "IT"});
CREATE (l2:Location {location_id: 1100, street_address: "93091 Calle della Testa", postal_code: "10934", city: "Venice", state_province: null, country_id: "IT"});
CREATE (l3:Location {location_id: 1200, street_address: "2017 Shinjuku-ku", postal_code: "1689", city: "Tokyo", state_province: "Tokyo Prefecture", country_id: "JP"});

// Departments
CREATE (d1:Department {department_id: 10, department_name: "Administration", manager_id: 200, location_id: 1200});
CREATE (d2:Department {department_id: 20, department_name: "Marketing", manager_id: 201, location_id: 1200});
CREATE (d3:Department {department_id: 30, department_name: "Purchasing", manager_id: 114, location_id: 1200});
CREATE (d4:Department {department_id: 60, department_name: "IT", manager_id: 103, location_id: 1200});

// Jobs
CREATE (j1:Job {job_id: "AD_PRES", job_title: "President", min_salary: 20080, max_salary: 40000});
CREATE (j2:Job {job_id: "AD_VP", job_title: "Administration Vice President", min_salary: 15000, max_salary: 30000});




CREATE (j3:Job {job_id: "IT_PROG", job_title: "Programmer", min_salary: 4000, max_salary: 10000});

// Employees
CREATE (e1:Employee {employee_id: 100, first_name: "Steven", last_name: "King", email: "SKING", phone_number: "515.123.4567", hire_date: date("2003-06-17"), job_id: "AD_PRES", salary: 24000, commission_pct: null, manager_id: null, department_id: 90});
CREATE (e2:Employee {employee_id: 101, first_name: "Neena", last_name: "Kochhar", email: "NKOCHHAR", phone_number: "515.123.4568", hire_date: date("2005-09-21"), job_id: "AD_VP", salary: 17000, commission_pct: null, manager_id: 100, department_id: 90});
CREATE (e3:Employee {employee_id: 103, first_name: "Alexander", last_name: "Hunold", email: "AHUNOLD", phone_number: "590.423.4569", hire_date: date("2006-01-03"), job_id: "IT_PROG", salary: 9000, commission_pct: null, manager_id: 102, department_id: 60});

// Job History (requires creating nodes for each job history entry)
CREATE (jh1:JobHistory {employee_id: 101, start_date: date("1989-09-21"), end_date: date("1993-10-27"), job_id: "AC_MGR", department_id: 110});

// Create Relationships

// Regions -> Countries
MATCH (r:Region), (c:Country) WHERE c.region_id = r.region_id
CREATE (c)-[:PART_OF]->(r);

// Countries -> Locations
MATCH (c:Country), (l:Location) WHERE l.country_id = c.country_id
CREATE (l)-[:LOCATED_IN]->(c);

// Locations -> Departments
MATCH (l:Location), (d:Department) WHERE d.location_id = l.location_id
CREATE (d)-[:LOCATED_AT]->(l);

// Departments -> Employees (manager)
MATCH (d:Department), (e:Employee) WHERE d.manager_id = e.employee_id
CREATE (d)-[:MANAGED_BY]->(e);

// Departments -> Employees (works in)
MATCH (d:Department), (e:Employee) WHERE e.department_id = d.department_id
CREATE (e)-[:WORKS_IN]->(d);

// Employees -> Jobs
MATCH (e:Employee), (j:Job) WHERE e.job_id = j.job_id
CREATE (e)-[:HAS_JOB]->(j);

//JobHistory -> Employees
MATCH (jh:JobHistory), (e:Employee) WHERE jh.employee_id = e.employee_id
CREATE (jh)-[:EMPLOYEE_HISTORY]->(e);

//JobHistory -> Jobs
MATCH (jh:JobHistory), (j:Job) WHERE jh.job_id = j.job_id
CREATE (jh)-[:JOB_HISTORY]->(j);

//JobHistory -> Departments
MATCH (jh:JobHistory), (d:Department) WHERE jh.department_id = d.department_id
CREATE (jh)-[:DEPARTMENT_HISTORY]->(d);

// Example Query: Find employees in the "IT" department.
MATCH (e:Employee)-[:WORKS_IN]->(d:Department)
WHERE d.department_name = "IT"
RETURN e;

// Example Query: Find the location of the "IT" department.
MATCH (d:Department)-[:LOCATED_AT]->(l:Location)
WHERE d.department_name = "IT"
RETURN l;

// Example Query: Find employees who are managed by Steven King
MATCH (e:Employee)<-[:MANAGED_BY]-(d:Department)-[:WORKS_IN]->(e2:Employee)
WHERE e.first_name = "Steven" AND e.last_name = "King"
RETURN e2;


Okay, let's convert the SQL queries in the image to Neo4j Cypher queries. I'll fill in the ? placeholders with the corresponding Cypher. I'll assume that the schema is such that:

•   Employee nodes have properties like empno, ename, sal, deptno.
•   Department nodes have properties like deptno, dname.
•   There is a relationship WORKS_IN between Employee and Department nodes, or WORKS_FOR. I will assume the presence of a WORKS_IN relationship between an Employee and their Department.

Here's the table with the converted queries:

| SQL                                                                         | Neo4j                                                                                     |
| :-------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------ |
| select * from emp;                                                        | MATCH (a:Employee) RETURN a                                                                |
| select * from dept;                                                       | MATCH (a:Department) RETURN a                                                              |
| select ename, sal from emp;                                               | MATCH (a:Employee) RETURN a.ename, a.sal                                                  |
| Select ename from emp;                                                    | MATCH (a:Employee) RETURN a.ename                                                         |
| Select * from emp where ename = 'SMITH';                                 | MATCH (a:Employee {ename: 'SMITH'}) RETURN a                                           |
| Select * from emp where empno in (7369, 15, 46, 16);                    | MATCH (a:Employee) WHERE a.empno IN [7369, 15, 46, 16] RETURN a                         |
| Select dept.deptno, emp.empno from dept join emp on dept.deptno = emp.deptno where dname = 'ACCOUNTING'; | MATCH (d:Department {dname: 'ACCOUNTING'})<-[:WORKS_IN]-(e:Employee) RETURN d.deptno, e.empno |
| Select dept.deptno, emp.empno from dept join emp on dept.deptno = emp.deptno where dname = 'WORKS';   | MATCH (d:Department {dname: 'WORKS'})<-[:WORKS_IN]-(e:Employee) RETURN d.deptno, e.empno|
| Select * from dept join emp on dept.deptno = emp.deptno where dname = 'ACCOUNTING';                    | MATCH (d:Department {dname: 'ACCOUNTING'})<-[:WORKS_IN]-(e:Employee) RETURN d, e  |
| Select * from dept join emp on dept.deptno = emp.deptno where dname = 'RESEARCH';                   | MATCH (d:Department {dname: 'RESEARCH'})<-[:WORKS_IN]-(e:Employee) RETURN d, e         |
| Select * from emp join dept on emp.empno = 7369 and dept.deptno = 20;     | MATCH (e:Employee {empno: 7369})-[r:WORKS_IN]->(d:Department {deptno: 20}) RETURN e,d         |
| select a.deptno, b.ename from dept a, emp b                             | MATCH (a:Department), (b:Employee) RETURN a.deptno, b.ename                           |
| Select a, b from dept a, emp b;                                        | MATCH (a:Department), (b:Employee) RETURN a, b                                        |
| select a.deptno, b.ename from dept a, emp b                             | MATCH (a:Department), (b:Employee) RETURN a.deptno, b.ename                           |
| Select * from dept join emp on dept.deptno = emp.deptno where emp.ename = 'SMITH';                 | MATCH (e:Employee {ename: 'SMITH'})-[:WORKS_IN]->(d:Department) RETURN d, e                                 |
| SELECT * from EMP WHERE SAL>2500;


Okay, let's complete the conversion of the SQL queries in the image to Neo4j Cypher.

| SQL                                                 | Neo4j                                                                                                   |
| :-------------------------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| SELECT * from EMP WHERE SAL>3000;                               | MATCH (e:Employee) WHERE e.sal > 3000 RETURN e                                                                             |
| SELECT DEPTNO, DNAME, LOC from DEPT;                               | MATCH (d:Department) RETURN d.deptno, d.dname, d.loc                                                                           |

Now, these next three SQL examples are challenging. SQL's UNION, INTERSECT, and JOIN don't translate directly to single Cypher queries in all cases, especially when you need to do complex combinations of projections. Cypher doesn't have explicit UNION or INTERSECT operators that work exactly like SQL. These often require multiple queries or more complex constructs involving APOC procedures. Since they involve combining outputs from different node types with potentially different properties into a single output, they require either: 1. returning the data separately or 2. converting the data into a common map format and then returning the maps

•  SELECT ENAME,DEPTNO from EMP UNION SELECT DEPTNO,DNAME, LOC from DEPT;: This query mixes different data types for columns. Assuming that we have EMP with columns ENAME, DEPTNO and DEPT with columns DEPTNO, DNAME and LOC
    // Return two distinct sets of information - one for Employees, one for Departments
    // You'd process the results separately in the application
    MATCH (e:Employee) RETURN e.ename AS ename, e.deptno AS deptno, null AS dname, null AS loc
    UNION ALL
    MATCH (d:Department) RETURN null AS ename, d.deptno AS deptno, d.dname AS dname, d.loc AS loc
This would return a single table with the first set being emp info and the second being dept info. The alternative would be to return two distinct sets of results

•   SELECT DEPTNO from EMP UNION SELECT DEPTNO from DEPT;: Here, we can use UNION ALL and then DISTINCT. In general in cypher we use UNION ALL to ensure no data is lost in the process and rely on other clauses such as DISTINCT to deal with redundant data.
    MATCH (e:Employee) RETURN e.deptno as deptno
    UNION ALL
    MATCH (d:Department) RETURN d.deptno as deptno
ChatGPT4 | Midjourney:
*  SELECT DEPTNO from EMP INTERSECT SELECT DEPTNO from DEPT;: This is the toughest. In SQL, this gives the values found in both tables. In Neo4j, we generally work by creating relationships. I have to assume it should be rewritten using that paradigm, returning all relationships named "WORKS_IN"

    MATCH (e:Employee)-[r:WORKS_IN]->(d:Department)
    RETURN DISTINCT r

However, the question asks for an exact result. Unfortunately this requires a procedure for doing this in neo4j:

    // Requires APOC
    CALL apoc.coll.intersection([
        [x IN collect(e.deptno) | x IN MATCH (e:Employee) RETURN e.deptno],
        [x IN collect(d.deptno) | x IN MATCH (d:Department) RETURN d.deptno]
    ])
    YIELD value AS intersection
    RETURN intersection

Alternatively, you can collect results and work with them within an application, comparing those results and returning them.

•  SELECT \* from DEPT, EMP WHERE SAL>3000;: We already covered the general cartesian product in Neo4j. However, you'll likely want to change it to involve the sal value.

MATCH (e:Employee) WHERE e.sal > 3000
MATCH (d:Department)
RETURN e, d

These are the closest direct translations I can provide given the tools. Certain operations in SQL, especially set-based operations like UNION and INTERSECT, don't have a direct, clean equivalent in Cypher, and the best way to handle them often depends on the specific use case and your overall data model.





Okay, let's translate those SQL queries into their Neo4j Cypher equivalents.  I will assume that EMP and DEPT are node labels in Neo4j, and the attributes are node properties.

1. Projection (π): SELECT DISTINCT ENAME, DEPTNO from EMP;
MATCH (e:EMP)
RETURN DISTINCT e.ENAME, e.DEPTNO


2.  SELECT DISTINCT DEPTNO, ENAME from EMP;
MATCH (e:EMP)
RETURN DISTINCT e.DEPTNO, e.ENAME


3. SELECT DISTINCT DEPTNO from EMP;
MATCH (e:EMP)
RETURN DISTINCT e.DEPTNO


4. Product (x): SELECT * from EMP, DEPT;
MATCH (e:EMP), (d:DEPT)
RETURN e, d


5. Union (U): SELECT DEPTNO, DNAME, LOC from DEPT;
MATCH (d:DEPT)
RETURN d.DEPTNO, d.DNAME, d.LOC


6.  SELECT ENAME, DEPTNO from EMP UNION SELECT DEPTNO, DNAME, LOC from DEPT;

This is tricky because the columns are different.  Neo4j doesn't have a direct equivalent of UNION with different columns in the way SQL does.  The closest would be to return a map with nulls where values are missing:
UNION ALL
MATCH (d:DEPT)
RETURN  d.DEPTNO AS DEPTNO, NULL AS ENAME, d.DNAME AS DNAME, d.LOC AS LOC


7.  SELECT DEPTNO from EMP UNION SELECT DEPTNO from DEPT;
MATCH (e:EMP)
RETURN e.DEPTNO AS DEPTNO
UNION
MATCH (d:DEPT)
RETURN d.DEPTNO AS DEPTNO


8. Intersection (∩): SELECT DEPTNO from EMP INTERSECT SELECT DEPTNO from DEPT;

Neo4j doesn't have a direct INTERSECT keyword. You can achieve this using a WHERE clause with IN:
MATCH (e:EMP)
WHERE e.DEPTNO IN [MATCH (d:DEPT) RETURN d.DEPTNO]
RETURN DISTINCT e.DEPTNO


9. Join (⨝): SELECT * from DEPT, EMP where SAL > 3000;

It's important to note here that the original SQL misses a join condition to link EMP and DEPT. The code below assumes that we want to find the products with sal>3000 without join conditon
MATCH (e:EMP), (d:DEPT)
WHERE e.SAL > 3000
RETURN e, d


Important Considerations:

•   Data Model:  These translations assume a simple node-based representation. A more realistic scenario would involve relationships between EMP and DEPT nodes (e.g., a WORKS_IN relationship).
•   UNION vs. UNION ALL:  I've used UNION where the original SQL implies it (to remove duplicates).  If you want all results, including duplicates, use UNION ALL.  In Neo4j, UNION ALL is significantly faster.
•   Performance:  For large datasets, these queries might need optimization.  Creating indexes on frequently accessed properties (like DEPTNO, ENAME, SAL, etc.) will improve performance.

Remember to adapt these queries to your specific data model and requirements. If the two data set needs to be joined on DEPTNO, then we can change 9. Join to the following:

9. Join (⨝) Updated: SELECT * from DEPT, EMP where EMP.DEPTNO=DEPT.DEPTNO and SAL > 3000;
It's important to note here that the original SQL misses a join condition to link EMP and DEPT. The code below assumes that we want to find the products with sal>3000 and the employees and departments are joined by the DEPTNO.
MATCH (e:EMP)-[:WORKS_IN]->(d:DEPT)
WHERE e.SAL > 3000
RETURN e, d

The :WORKS_IN relation should connect the employees with their departments.

Окей, вот 5 более простых запросов для Neo4j, сфокусированных на базовых операциях с графом сотрудников (EMP) и департаментов (DEPT), связанных отношением WORKS_IN.

Запрос 1: Найти имена всех сотрудников.
MATCH (e:EMP)
RETURN e.ENAME


Запрос 2: Найти все департаменты, расположенные в определенном городе (например, "Dallas").
MATCH (d:DEPT)
WHERE d.LOC = "Dallas"
RETURN d.DNAME


Запрос 3: Найти всех сотрудников, работающих в определенном департаменте (например, "Research").
MATCH (e:EMP)-[:WORKS_IN]->(d:DEPT)
WHERE d.DNAME = "Research"
RETURN e.ENAME


Запрос 4: Найти имя сотрудника и название департамента, в котором он работает.
MATCH (e:EMP)-[:WORKS_IN]->(d:DEPT)
RETURN e.ENAME, d.DNAME


Запрос 5: Найти всех сотрудников, зарабатывающих больше определенной суммы (например, 50000).
MATCH (e:EMP)
WHERE e.SAL > 50000
RETURN e.ENAME, e.SAL


Объяснения:

•   MATCH (e:EMP):  Находит все узлы с меткой EMP (сотрудники).
•   RETURN e.ENAME:  Возвращает значение свойства ENAME (имя сотрудника) для найденных узлов.
•   WHERE d.LOC = "Dallas":  Фильтрует результаты, чтобы вернуть только департаменты, расположенные в "Dallas".
•   MATCH (e:EMP)-[:WORKS_IN]->(d:DEPT):  Находит сотрудников (EMP), которые связаны с департаментами (DEPT) отношением типа WORKS_IN.
•   e.SAL > 50000:  Фильтрует сотрудников на основе их зарплаты (SAL).

Эти запросы демонстрируют базовые операции поиска, фильтрации и возврата данных в графе Neo4j.  Они просты для понимания и являются хорошей отправной точкой для более сложных запросов.  По мере необходимости вы можете добавлять дополнительные условия WHERE, сортировку ORDER BY,  агрегацию и т.д.